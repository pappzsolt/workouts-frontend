import { Component, OnInit, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { CoachProgramBoardComponent } from '../../../shared/coach/coach-program-board/coach-program-board.component';
import { CoachWorkoutBoardComponent } from '../../../shared/coach/coach-workouts-board/coach-workout-board.component';
import { Workout } from '../../../../models/workout.model';
import { CoachProgram } from '../../../../models/coach-program.model';
import { ProgramWorkoutService } from '../../../../services/coach/program-workout.service'; // üîπ IMPORT√ÅLJUK A SERVICE-T

@Component({
  selector: 'app-program-workouts-ass',
  standalone: true,
  imports: [CommonModule, FormsModule, CoachProgramBoardComponent, CoachWorkoutBoardComponent],
  templateUrl: './program-workouts-ass.component.html',
})
export class ProgramWorkoutsAssComponent implements OnInit {

  programs: CoachProgram[] = [];
  workouts: Workout[] = [];

  selectedProgramId?: number;

  // Wrapper szinten t√°rolt kiv√°lasztott workoutok
  selectedWorkoutIds: number[] = [];

  @Output() assignedWorkouts = new EventEmitter<{ programId: number, workoutIds: number[] }>();

  constructor(private programWorkoutService: ProgramWorkoutService) {} // ‚úÖ SERVICE INJEKCI√ì

  ngOnInit(): void {}

  // Program kiv√°laszt√°s
  onProgramSelected(programId: number) {
    this.selectedProgramId = programId;
    console.log('Selected program in wrapper:', programId);

    // üîπ √öj program kiv√°laszt√°sakor t√∂r√∂lj√ºk a kor√°bbi kiv√°lasztott workoutokat
    this.selectedWorkoutIds = [];
  }

  // Workout hozz√°ad√°sa/t√∂rl√©se
  onWorkoutsChange(updatedIds: number[]) {
    if (!this.selectedProgramId) {
      console.warn('Program nincs kiv√°lasztva!');
      return;
    }

    // Friss√≠tj√ºk a teljes t√∂mb√∂t a checkbox √°llapot alapj√°n
    this.selectedWorkoutIds = [...updatedIds];

    console.log('Current assigned workouts for program', this.selectedProgramId, this.selectedWorkoutIds);

    // K√ºldj√ºk a kiv√°lasztott programhoz tartoz√≥ workoutokat
    this.assignedWorkouts.emit({
      programId: this.selectedProgramId,
      workoutIds: this.selectedWorkoutIds
    });
  }

  // üîπ Ment√©s backendhez (Program-Workout kapcsolatok ment√©se)
  saveSelectedWorkouts() {
    if (!this.selectedProgramId) {
      console.warn('Nincs kiv√°lasztott program!');
      return;
    }

    if (this.selectedWorkoutIds.length === 0) {
      console.warn('Nincsenek kiv√°lasztott workoutok!');
      return;
    }

    console.log('üöÄ Ment√©s backendhez:', {
      programId: this.selectedProgramId,
      workoutIds: this.selectedWorkoutIds
    });

    // üîπ Backend h√≠v√°s: minden workout ment√©se a kiv√°lasztott programhoz
    this.selectedWorkoutIds.forEach((workoutId, index) => {
      this.programWorkoutService.addWorkoutToProgram(this.selectedProgramId!, workoutId, index).subscribe({
        next: res => console.log(`‚úÖ Workout ${workoutId} mentve:`, res),
        error: err => console.error(`‚ùå Workout ${workoutId} ment√©se sikertelen:`, err)
      });
    });
  }

  // Workout elt√°vol√≠t√°sa a kiv√°lasztott list√°b√≥l
  removeWorkout(wid: number) {
    this.selectedWorkoutIds = this.selectedWorkoutIds.filter(id => id !== wid);
    this.onWorkoutsChange(this.selectedWorkoutIds);
  }
}
